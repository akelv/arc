// Code generated by protoc-gen-go.
// source: model.proto
// DO NOT EDIT!

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model.proto

It has these top-level messages:
	ArcBlob
	ArcPresentation
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArcPresentation_Type int32

const (
	ArcPresentation_PNG ArcPresentation_Type = 0
	ArcPresentation_SVG ArcPresentation_Type = 1
	ArcPresentation_PDF ArcPresentation_Type = 3
)

var ArcPresentation_Type_name = map[int32]string{
	0: "PNG",
	1: "SVG",
	3: "PDF",
}
var ArcPresentation_Type_value = map[string]int32{
	"PNG": 0,
	"SVG": 1,
	"PDF": 3,
}

func (x ArcPresentation_Type) String() string {
	return proto.EnumName(ArcPresentation_Type_name, int32(x))
}
func (ArcPresentation_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type ArcBlob struct {
	// This is the raw serialized byte array of the arc data type
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ArcBlob) Reset()                    { *m = ArcBlob{} }
func (m *ArcBlob) String() string            { return proto.CompactTextString(m) }
func (*ArcBlob) ProtoMessage()               {}
func (*ArcBlob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ArcBlob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ArcPresentation struct {
	// Type of the presentation
	Type ArcPresentation_Type `protobuf:"varint,1,opt,name=type,enum=model.ArcPresentation_Type" json:"type,omitempty"`
	// Serialized raw data to be shared
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ArcPresentation) Reset()                    { *m = ArcPresentation{} }
func (m *ArcPresentation) String() string            { return proto.CompactTextString(m) }
func (*ArcPresentation) ProtoMessage()               {}
func (*ArcPresentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ArcPresentation) GetType() ArcPresentation_Type {
	if m != nil {
		return m.Type
	}
	return ArcPresentation_PNG
}

func (m *ArcPresentation) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ArcBlob)(nil), "model.ArcBlob")
	proto.RegisterType((*ArcPresentation)(nil), "model.ArcPresentation")
	proto.RegisterEnum("model.ArcPresentation_Type", ArcPresentation_Type_name, ArcPresentation_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ArcViz service

type ArcVizClient interface {
	Render(ctx context.Context, in *ArcBlob, opts ...grpc.CallOption) (*ArcPresentation, error)
}

type arcVizClient struct {
	cc *grpc.ClientConn
}

func NewArcVizClient(cc *grpc.ClientConn) ArcVizClient {
	return &arcVizClient{cc}
}

func (c *arcVizClient) Render(ctx context.Context, in *ArcBlob, opts ...grpc.CallOption) (*ArcPresentation, error) {
	out := new(ArcPresentation)
	err := grpc.Invoke(ctx, "/model.ArcViz/Render", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArcViz service

type ArcVizServer interface {
	Render(context.Context, *ArcBlob) (*ArcPresentation, error)
}

func RegisterArcVizServer(s *grpc.Server, srv ArcVizServer) {
	s.RegisterService(&_ArcViz_serviceDesc, srv)
}

func _ArcViz_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArcBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArcVizServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.ArcViz/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArcVizServer).Render(ctx, req.(*ArcBlob))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArcViz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.ArcViz",
	HandlerType: (*ArcVizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Render",
			Handler:    _ArcViz_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model.proto",
}

func init() { proto.RegisterFile("model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x64, 0xb9, 0xd8, 0x1d,
	0x8b, 0x92, 0x9d, 0x72, 0xf2, 0x93, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0xa5, 0x4a, 0x2e, 0x7e, 0xc7, 0xa2, 0xe4, 0x80, 0xa2,
	0xd4, 0xe2, 0xd4, 0xbc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0x3c, 0x21, 0x7d, 0x2e, 0x96, 0x92, 0xca,
	0x82, 0x54, 0xb0, 0x32, 0x3e, 0x23, 0x69, 0x3d, 0x88, 0xa1, 0x68, 0xaa, 0xf4, 0x42, 0x2a, 0x0b,
	0x52, 0x83, 0xc0, 0x0a, 0xe1, 0xe6, 0x32, 0x21, 0x99, 0xab, 0xc8, 0xc5, 0x02, 0x52, 0x21, 0xc4,
	0xce, 0xc5, 0x1c, 0xe0, 0xe7, 0x2e, 0xc0, 0x00, 0x62, 0x04, 0x87, 0xb9, 0x0b, 0x30, 0x82, 0x45,
	0x5c, 0xdc, 0x04, 0x98, 0x8d, 0x6c, 0xb8, 0xd8, 0x1c, 0x8b, 0x92, 0xc3, 0x32, 0xab, 0x84, 0x8c,
	0xb8, 0xd8, 0x82, 0x52, 0xf3, 0x52, 0x52, 0x8b, 0x84, 0xf8, 0x10, 0xb6, 0x81, 0x9c, 0x2c, 0x25,
	0x86, 0xdd, 0x76, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x2f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x9a, 0x8e, 0xa7, 0x14, 0xf4, 0x00, 0x00, 0x00,
}
